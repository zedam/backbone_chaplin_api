{"version":3,"sources":["models/base/collection.coffee"],"names":[],"mappings":"AAAA,IAAA;;;AAAA,MAAA,CAAO,CACL,SADK,EAEL,UAFK,EAGL,mBAHK,CAAP,EAIG,SAAC,OAAD,EAAU,QAAV,EAAoB,KAApB;AAED,MAAA;SAAM;;;;;;;yBASJ,KAAA,GAAO;;yBAEP,KAAA,GAAO,SAAC,QAAD;aACL,QAAQ,CAAC;IADJ;;yBAGP,IAAA,GAAM,SAAC,MAAD,EAAS,UAAT,EAAqB,OAArB;MACJ,OAAA,GAAU,OAAA,IAAW;MACrB,OAAO,CAAC,UAAR,GAAqB,SAAC,GAAD;QACnB,IAAC,CAAA,GAAD,GAAO,YAAA,GAAe,IAAC,CAAA;eACvB,GAAG,CAAC,gBAAJ,CAAqB,eAArB,EAAuC,QAAA,GAAW,0CAAlD;MAFmB;aAIrB,QAAQ,CAAC,IAAI,CAAC,IAAd,CAAmB,IAAnB,EAAyB,MAAzB,EAAiC,UAAjC,EAA6C,OAA7C;IANI;;;;KAdiB,OAAO,CAAC;AAFhC,CAJH","file":"models/base/collection.js","sourceRoot":"/source/","sourcesContent":["define [\n  'chaplin'\n  'backbone'\n  'models/base/model'\n], (Chaplin, Backbone, Model) ->\n\n  class Collection extends Chaplin.Collection\n    # Mixin a synchronization state machine.\n    # _(@prototype).extend Chaplin.SyncMachine\n    # initialize: ->\n    #   super\n    #   @on 'request', @beginSync\n    #   @on 'sync', @finishSync\n    #   @on 'error', @unsync\n\n    model: Model\n\n    parse: (response) ->\n      response.results\n\n    sync: (method, collection, options) ->\n      options = options || {}\n      options.beforeSend = (xhr) ->\n        @url = API_ROOT_URL + @url;\n        xhr.setRequestHeader('Authorization', ('Token ' + 'fccb3a073f9e7e53e01838d4693d1302e5857cf3'))\n\n      Backbone.sync.call(this, method, collection, options)\n"]}