{"version":3,"sources":["views/base/view.coffee"],"names":[],"mappings":"AAAA,IAAA;;;;AAAA,MAAA,CAAO,CACL,YADK,EAEL,SAFK,EAGL,iBAHK,CAAP,EAIG,SAAC,UAAD,EAAa,OAAb;EACD;AAAA,MAAA;SAEM;;;IAES,cAAC,OAAD;;QAAC,UAAU;;;;;MACtB,uCAAA,SAAA;MACA,IAAC,CAAA,MAAD,GAAU,CAAC,CAAC,IAAF,CAAO,IAAC,CAAA,MAAR,EAAgB,CAAA,SAAA,KAAA;eAAA,SAAC,MAAD;UACxB,KAAC,CAAA,YAAD,CAAA;UACA,MAAA,CAAA;UACA,KAAC,CAAA,WAAD,CAAA;iBACA;QAJwB;MAAA,CAAA,CAAA,CAAA,IAAA,CAAhB;IAFC;;mBAQb,YAAA,GAAc,SAAA;aACZ;IADY;;mBAGd,MAAA,GAAQ,SAAA;aACN,kCAAA,SAAA;IADM;;mBAGR,WAAA,GAAa,SAAA;aACX;IADW;;mBAIb,mBAAA,GAAqB,SAAA;AAiBnB,UAAA;MAAA,QAAA,GAAW,IAAC,CAAA;MAEZ,IAAG,OAAO,QAAP,KAAmB,QAAtB;QAIE,YAAA,GAAe,UAAU,CAAC,OAAX,CAAmB,QAAnB;QACf,IAAC,CAAA,WAAW,CAAA,SAAE,CAAA,QAAd,GAAyB,aAL3B;OAAA,MAAA;QAOE,YAAA,GAAe,SAPjB;;aASA;IA5BmB;;;;KApBJ,OAAO,CAAC;AAH1B,CAJH","file":"views/base/view.js","sourceRoot":"/source/","sourcesContent":["define [\n  'handlebars'\n  'chaplin'\n  'lib/view-helper' # Just load the view helpers, no return value\n], (Handlebars, Chaplin) ->\n  'use strict'\n\n  class View extends Chaplin.View\n\n    constructor: (options = {}) ->\n      super\n      @render = _.wrap @render, (render) =>\n        @beforeRender()\n        render()\n        @afterRender()\n        @\n\n    beforeRender: () =>\n      @\n\n    render: () =>\n      super\n\n    afterRender: () =>\n      @\n\n\n    getTemplateFunction: ->\n      # Template compilation\n      # --------------------\n\n      # This demo uses Handlebars templates to render views.\n      # The template is loaded with Require.JS and stored as string on\n      # the view prototype. On rendering, it is compiled on the\n      # client-side. The compiled template function replaces the string\n      # on the view prototype.\n      #\n      # In the end you might want to precompile the templates to JavaScript\n      # functions on the server-side and just load the JavaScript code.\n      # Several precompilers create a global JST hash which stores the\n      # template functions. You can get the function by the template name:\n      #\n      # templateFunc = JST[@templateName]\n\n      template = @template\n\n      if typeof template is 'string'\n        # Compile the template string to a function and save it\n        # on the prototype. This is a workaround since an instance\n        # shouldnâ€™t change its prototype normally.\n        templateFunc = Handlebars.compile template\n        @constructor::template = templateFunc\n      else\n        templateFunc = template\n\n      templateFunc\n"]}