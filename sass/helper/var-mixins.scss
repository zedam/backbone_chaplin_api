/* (c) 2015 Bravoure B.V. - bravoure.nl */

/***[ vars ]******************************************************************************************/

$black: #000000;
$white: #ffffff;

$animation: 0.2s;
$base-border-radius: 2px;

$base-font-size: 16px;
$base-line-height: 22px;

$base-color-0: #000000;
$facebook-color: #3F5C9A;

$base-header-color: #848484;
$base-header-hover-color: #696c71;
$base-footer-color: #5B6270;
$base-footer-hover-color: #CD3252;
$base-footer-color-2: #4C4C4C;

$base-background-color: #F6F6F6;
$base-button-color: #EC0F50;
$base-button-color-hover: #EC0F50;

$base-grey-color: #979797;
$base-grey-color-2: #555555;
$base-placeholder-color: #969BAE;

$base-secondary-background: #F1F1F1;

// // //
/*

$base-name-profile-color: #4ba1af;
$base-header-grey: #dddddd;
$base-header-grey2: #eeeeee;
$base-header-input-hover: #fafafa;
*/


$href-color: $black;
$href-color-alt: $black;

$selection-color: $black;
$selection-text-color: $white;

$notification-bg: #FFB2BB;
$notification-text: #F13950;
$notification-success-text: #62c06f;
$placeholder-color: #d3d4d5;

$primary-text: #000;
$base-font-size: 12px;

$base-line-height: 12px;

$submit-color: #f46e00;
$submit-color-border: #d05e00;
$submit-color-hover: #f67f00;
$submit-color-border-hover: #d26c00;
$submit-color-active: #e86800;
$submit-color-border-active: #c65900;

$root: '/';
$images: '#{$root}static/images/';
$images_c: '#{$root}static/images/component/';
$images_m: '#{$root}static/images/misc/';

// media querie values
$break-small: 640px;
$break-large: 1220px;
$break-large-2: 1420px;
$break-large-3: 1600px;

/***[ mixins ]**************************************************************************************/

@mixin animation($vars, $duration: $animation) {
    animation: $arguments;
}

@mixin background-rgba($vars) {
    $hex: rgbahex($vars);
    background-color: $vars;
    -ms-filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=$hex,endColorstr=$hex);
}

@mixin background-size($horizontal: center, $vertical: center) {
    background-position: $horizontal $vertical;
    background-size: cover;
}

@mixin border-radius($radius: $border-radius) {
    border-radius: $radius;
}

@mixin box-sizing() {
    box-sizing: border-box;
}

@mixin box-shadow($vars) {
    box-shadow: $vars;
}

// clearfix
// http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix() {
    &:before,
    &:after {
        content: '';
        display: table;
    }
    &:after {
        clear: both;
    }
}

@mixin cover() {
    height: 100%;
    left: 0;
    position: absolute;
    top: 0;
    width: 100%;
}

// text overflow to dots (...)
// (add width and height and block, only works with single line)
// https://developer.mozilla.org/en-US/docs/CSS/text-overflow
@mixin ellipsis() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    word-wrap: normal;
}

// https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
@mixin image-replacement() {
    color: transparent;
    font: 0/0 a;
    text-shadow: none;
}

// use list in layout
@mixin list-layout() {
    list-style: none;
    margin: 0;
    padding: 0;
}

// responsive media queries
@mixin respond-to($media) {
    @if $media == mobile {
        @media only screen and (max-width: $break-small) {
            @content;
        }
    } @else if $media == tablet {
        @media only screen and (min-width: $break-small + 1) {
            @content;
        }
    } @else if $media == tablet_portrait {
        @media only screen and (min-width: $break-small + 1) and (max-width: $break-large - 1) and (orientation: portrait) {
            @content;
        }
    } @else if $media == handheld {
        @media only screen and (max-width: $break-large - 1) {
            @content;
        }
    } @else if $media == desktop {
        @media only screen and (min-width: $break-large) {
            @content;
        }
    } @else if $media == desktop_big {
        @media only screen and (min-width: $break-large-2) {
            @content;
        }
    } @else if $media == desktop_big_2 {
        @media only screen and (min-width: $break-large-3) {
            @content;
        }
    }
}

@mixin retina() {

    @media (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx)
    {
        @content;
    }
}

@mixin retina_device($device) {

    @if $device == mobile {
        $device-media: 'max-width: ' + $break-small - 1;
    }
    @else if $device == tablet {
        $device-media: 'min-width: ' + $break-small;
    }
    @else if $device == desktop {
        $device-media: 'min-width: ' + $break-large;
    }
    @else if $device == desktop_big {
        $device-media: 'min-width: ' + $break-large-2;
    }


    @media
    only screen and (-o-min-device-pixel-ratio: 2.6/2),
    only screen and (-webkit-min-device-pixel-ratio: 1.3),
    only screen and (min-device-pixel-ratio: 1.3),
    only screen and (min-resolution: 1.3dppx)
    {
        @content;
    }
}

@function image_path($device, $file) {
    @return $root + 'assets/images/' + $device + '/' + $file;
}

@mixin image($file, $device) {
    background-image: url(image_path($device, $file));
    background-repeat: no-repeat;

    /*@media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
        & {
            @include background-size();
            background-image: url(image_path($device, str-slice($file , 0 , -5 ) + '@2x' + str-slice($file , -4 , -1)));
        }
    }*/
}

@mixin image_no_cover($file, $device) {
    background-image: url(image_path($device, $file));
    background-repeat: no-repeat;

    /*@media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
        & {
            background-image: url(image_path($device, str-slice($file , 0 , -5 ) + '@2x' + str-slice($file , -4 , -1)));
        }
    }*/
}

@mixin opacity($opacity) {
    opacity: $opacity;
}

@mixin size($width, $height: $width) {
    height: $height;
    width: $width;
}

@mixin transform($vars) {
    -ms-transform: $vars;
    -webkit-transform: $vars;
    transform: $vars;
}

@mixin transition($property: all, $duration: $animation, $delay: 0s, $ease: ease-out) {
    transition: $property $duration $delay $ease;
}

@mixin transition_str($vars) {
    transition: $vars;
}

@mixin perspective($perspective) {
    -webkit-perspective: $perspective;
    perspective: $perspective;
}

/***[ animation easing ]******************************************************************************************/

$easeInCubic: cubic-bezier(0.550, 0.055, 0.675, 0.190);
$easeOutCubic: cubic-bezier(0.215, 0.610, 0.355, 1.000);
$easeInOutCubic: cubic-bezier(0.645, 0.045, 0.355, 1.000);
$easeInCirc: cubic-bezier(0.600, 0.040, 0.980, 0.335);
$easeOutCirc: cubic-bezier(0.075, 0.820, 0.165, 1.000);
$easeInOutCirc: cubic-bezier(0.785, 0.135, 0.150, 0.860);
$easeInExpo: cubic-bezier(0.950, 0.050, 0.795, 0.035);
$easeOutExpo: cubic-bezier(0.190, 1.000, 0.220, 1.000);
$easeInOutExpo: cubic-bezier(1.000, 0.000, 0.000, 1.000);
$easeInQuad: cubic-bezier(0.550, 0.085, 0.680, 0.530);
$easeOutQuad: cubic-bezier(0.250, 0.460, 0.450, 0.940);
$easeInOutQuad: cubic-bezier(0.455, 0.030, 0.515, 0.955);
$easeInQuart: cubic-bezier(0.895, 0.030, 0.685, 0.220);
$easeOutQuart: cubic-bezier(0.165, 0.840, 0.440, 1.000);
$easeInOutQuart: cubic-bezier(0.770, 0.000, 0.175, 1.000);
$easeInQuint: cubic-bezier(0.755, 0.050, 0.855, 0.060);
$easeOutQuint: cubic-bezier(0.230, 1.000, 0.320, 1.000);
$easeInOutQuint: cubic-bezier(0.860, 0.000, 0.070, 1.000);
$easeInSine: cubic-bezier(0.470, 0.000, 0.745, 0.715);
$easeOutSine: cubic-bezier(0.390, 0.575, 0.565, 1.000);
$easeInOutSine: cubic-bezier(0.445, 0.050, 0.550, 0.950);
$easeInBack: cubic-bezier(0.600, -0.280, 0.735, 0.045);
$easeOutBack: cubic-bezier(0.175, 0.885, 0.320, 1.275);
$easeInOutBack: cubic-bezier(0.680, -0.550, 0.265, 1.550);

@mixin placeholder($color, $color2: #fff) {

    &::-webkit-input-placeholder {
        /* WebKit browsers */
        color: $color;
        transition: color 1s;
    }
    &::-moz-placeholder {
        /* Mozilla Firefox 19+ */
        color: $color;
        transition: color 1s;
    }
    &:-ms-input-placeholder {
        /* Internet Explorer 10+ */
        color: $color;
        transition: color 1s;
    }

    &:focus::-webkit-input-placeholder {
        /* WebKit browsers */
        color: $color2;
    }
    &:focus::-moz-placeholder {
        /* Mozilla Firefox 19+ */
        color: $color2;
    }
    &:focus:-ms-input-placeholder {
        /* Internet Explorer 10+ */
        color: $color2;
    }
}
